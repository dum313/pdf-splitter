# üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import re
import sys
import shutil
import argparse
import pytesseract
from pdf2image import convert_from_path
from PyPDF2 import PdfReader, PdfWriter
from tkinter import Tk, filedialog
from tqdm import tqdm


def main():
    """Split PDF into separate files using OCR for naming."""

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
    tesseract_cmd = shutil.which("tesseract")
    pdftoppm_cmd = shutil.which("pdftoppm")
    if not tesseract_cmd and not os.getenv("TESSERACT_CMD"):
        print(
            "‚ö†Ô∏è Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ "
            "–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TESSERACT_CMD."
        )
        sys.exit(1)

    if not pdftoppm_cmd and not os.getenv("POPPLER_PATH"):
        print(
            "‚ö†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ pdftoppm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Poppler –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ "
            "–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è POPPLER_PATH."
        )
        sys.exit(1)

    parser = argparse.ArgumentParser(
        description="Split PDF into separate files using OCR for naming."
    )
    parser.add_argument(
        "--input",
        "-i",
        help="–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É PDF-—Ñ–∞–π–ª—É",
    )
    parser.add_argument(
        "--output",
        "-o",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü",
    )
    args = parser.parse_args()

    # üß≠ –ü—É—Ç—å –∫ Poppler –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω
    poppler_path = None

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POPPLER_PATH, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    env_poppler = os.getenv("POPPLER_PATH")
    if env_poppler:
        poppler_path = env_poppler
    # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å pdftoppm, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Poppler
    elif not pdftoppm_cmd:
        # –ï—Å–ª–∏ pdftoppm –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä—ë–º –ø–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Poppler
        poppler_path = os.path.join(
            os.path.dirname(__file__),
            "poppler-24.08.0",
            "Library",
            "bin",
        )

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—É—Ç—å –∫ Tesseract —á–µ—Ä–µ–∑ TESSERACT_CMD, –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ pytesseract
    env_tesseract = os.getenv("TESSERACT_CMD")
    if env_tesseract:
        pytesseract.pytesseract.tesseract_cmd = env_tesseract

    needs_gui = not args.input or not args.output
    if needs_gui:
        # üîï –û—Ç–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ tkinter (–æ–Ω–æ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ)
        Tk().withdraw()

    # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π PDF
    if args.input:
        source_pdf = args.input
    else:
        source_pdf = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            filetypes=[("PDF —Ñ–∞–π–ª—ã", "*.pdf")],
        )
        if not source_pdf:
            print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            sys.exit()

    # üìÅ –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    pdf_name = os.path.splitext(os.path.basename(source_pdf))[0]

    # üóÇÔ∏è –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.output:
        chosen_dir = args.output
    else:
        chosen_dir = filedialog.askdirectory(
            title="–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            initialdir=os.path.dirname(source_pdf),
        )
        if not chosen_dir:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Ä—è–¥–æ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
            chosen_dir = os.path.dirname(source_pdf)

    # üõ†Ô∏è –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    output_folder = os.path.join(chosen_dir, pdf_name)
    os.makedirs(output_folder, exist_ok=True)

    # üìñ –ß–∏—Ç–∞–µ–º PDF-—Ñ–∞–π–ª
    reader = PdfReader(source_pdf)


    # üîç –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, CICU6332694P)
    flex_pattern = re.compile(r"([A-Z]{4})([A-Z]?)(\d{7})([P])")

    # ‚úÇÔ∏è –û–±–ª–∞—Å—Ç—å, –≥–¥–µ –æ–±—ã—á–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω ID –Ω–∞ —Å–∫–∞–Ω–µ (—Å–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    crop_area = (0, 1900, 1000, 2300)

    # ‚ñ∂Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    i = 0
    total_pages = len(reader.pages)
    progress_bar = tqdm(total=total_pages, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞", unit="—Å—Ç—Ä.")
    while i < total_pages:
        processed_pages = 1
        # üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        current_image = convert_from_path(
            source_pdf,
            dpi=300,
            poppler_path=poppler_path,
            first_page=i + 1,
            last_page=i + 1,
        )[0]
        cropped_image = current_image.crop(crop_area)

        # üî° –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç (OCR) –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –º—É—Å–æ—Ä–∞
        text = pytesseract.image_to_string(cropped_image)
        text_clean = re.sub(r"[\s()\-\n]+", "", text.upper())

        # üß† –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        match = flex_pattern.search(text_clean)
        if match:
            part1, extra_letter, part2, last_letter = match.groups()
            identifier = part1 + part2
        else:
            identifier = f"unknown_{i + 1}"
            print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: ID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí '{text_clean}'")

        # üìÑ –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª
        writer = PdfWriter()
        writer.add_page(reader.pages[i])

        # üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥—ë—Ç –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ
        if i + 1 < total_pages:
            next_image = convert_from_path(
                source_pdf,
                dpi=300,
                poppler_path=poppler_path,
                first_page=i + 2,
                last_page=i + 2,
            )[0].crop(crop_area)
            next_text = pytesseract.image_to_string(next_image)
            next_clean = re.sub(r"[\s()\-\n]+", "", next_text.upper())

            # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            if not flex_pattern.search(next_clean):
                writer.add_page(reader.pages[i + 1])
                i += 2
                processed_pages = 2
            else:
                i += 1
        else:
            i += 1

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
        output_path = os.path.join(output_folder, f"{identifier}.pdf")

        # If file exists, append counter suffix until name is unique
        if os.path.exists(output_path):
            base, ext = os.path.splitext(output_path)
            counter = 1
            new_output_path = f"{base}_{counter}{ext}"
            while os.path.exists(new_output_path):
                counter += 1
                new_output_path = f"{base}_{counter}{ext}"
            print(
                "‚ÑπÔ∏è –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞:",
                f"{os.path.basename(output_path)} -> {os.path.basename(new_output_path)}",
            )
            output_path = new_output_path

        with open(output_path, "wb") as out_pdf:
            writer.write(out_pdf)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_path}")
        progress_bar.update(processed_pages)

    progress_bar.close()


if __name__ == "__main__":
    main()
